# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import util, changes, schedulers, steps, worker, reporters

c = BuildmasterConfig = {}

####### PROJECT IDENTITY

c['title'] = "WAVECRUNCHER"
c['titleURL'] = "https://dev.wavecruncher.net/"
c['buildbotURL'] = "http://localhost:8010/"

# minimalist config to activate new web UI
c['www'] = dict(port=8010, plugins=dict(waterfall_view={}, console_view={}, grid_view={}))
# c['www']['authz'] = util.Authz(allowRules=[util.AnyEndpointMatcher(role="admins")],
#                                roleMatchers=[util.RolesFromUsername(roles=['admins'], usernames=['admin'])])
# c['www']['auth'] = util.UserPasswordAuth({'admin': 'zorglub24'})

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

####### Buildbot net usage disabling

c['buildbotNetUsageData'] = None

####### WORKERS
worker_names = ["bb-centos-7", "bb-debian-stretch", "bb-debian-buster",
                "bb-fedora-29", "bb-ubuntu-18_04"]

def create_worker(name):
    return worker.Worker(name, "retsam-bb", max_builds=1)

c['workers'] = [create_worker(name) for name in worker_names]
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

git_branches = ['master', 'release']

c['change_source'] = []
c['change_source'].append(changes.GitPoller('ssh://git@git.wavecruncher.net/srv/git/veriparse.git',
                                            workdir='gitpoller_veriparse',
                                            branches=git_branches, pollInterval=300))

####### BUILDERS
build_configurations = ['Release', 'Debug']

def veriparse_in_external_build_factory(type):
    build_dir = 'build-{}'.format(type)
    factory = util.BuildFactory()

    factory.addStep(steps.Git(repourl='ssh://git@git.wavecruncher.net/srv/git/veriparse.git',
                              mode='full',
                              method='clobber',
                              haltOnFailure=True))

    factory.addStep(steps.ShellCommand(name='mkdir',
                                       command="mkdir -p {}".format(build_dir),
                                       workdir='build/external',
                                       haltOnFailure=True))

    factory.addStep(steps.ShellCommand(name='cmake',
                                       command="cmake -DCMAKE_BUILD_TYPE={} ..".format(type),
                                       workdir='build/external/{}'.format(build_dir),
                                       haltOnFailure=True))

    factory.addStep(steps.ShellCommand(name='make',
                                       command="make",
                                       workdir='build/external/{}'.format(build_dir),
                                       # env={'CPLUS_INCLUDE_PATH': '/usr/include/python3.7'},
                                       haltOnFailure=True))
    return factory

def veriparse_linux_mingw64_build_factory(type):
    build_dir = 'build-{}'.format(type)
    factory = util.BuildFactory()

    factory.addStep(steps.Git(repourl='ssh://git@git.wavecruncher.net/srv/git/veriparse.git',
                              mode='full',
                              method='clobber',
                              haltOnFailure=True))

    factory.addStep(steps.ShellCommand(name='mkdir',
                                       command="mkdir -p {}".format(build_dir),
                                       workdir='build',
                                       haltOnFailure=True))

    factory.addStep(steps.ShellCommand(name='cmake',
                                       command=("mingw64-cmake"
                                                " -DCMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES=/usr/x86_64-w64-mingw32/sys-root/mingw/include"
                                                " -DCMAKE_BUILD_TYPE={} ..".format(type)),
                                       workdir='build/{}'.format(build_dir),
                                       haltOnFailure=True))

    factory.addStep(steps.ShellCommand(name='make',
                                       command="make",
                                       workdir='build/{}'.format(build_dir),
                                       haltOnFailure=True))
    
    factory.addStep(steps.ShellCommand(name='tests',
                                       command="make test",
                                       workdir='build/{}'.format(build_dir),
                                       env={'WINEPATH': '/usr/x86_64-w64-mingw32/sys-root/mingw/bin',
                                            'VERIPARSE_SOURCE_ROOT': '../../..'},
                                       haltOnFailure=True))
    return factory

def get_scheduler_name(worker_name, git_branch):
    wname_split = worker_name.split('-')
    wname_list = [name.capitalize().replace('_', '.') for name in wname_split[1:]]
    wname = ' '.join(wname_list)
    return '{} - {} branch'.format(wname, git_branch)    

def get_builder_name(worker_name, git_branch, build_config):
    return '{} - {} config'.format(get_scheduler_name(worker_name, git_branch), build_config)
    
c['builders'] = []
for worker_name in worker_names:
    for git_branch in git_branches:
        for bconf in build_configurations:
            c['builders'].append(util.BuilderConfig(name=get_builder_name(worker_name, git_branch, bconf),
                                                    workernames=[worker_name],
                                                    factory=veriparse_in_external_build_factory(bconf)))

# The worker bb-mingw64-linux does not exist. The real worker is bb-fedora-29.            
for git_branch in git_branches:
    for bconf in build_configurations:
        c['builders'].append(util.BuilderConfig(name=get_builder_name('bb-mingw64-linux', git_branch, bconf),
                                                workernames=['bb-fedora-29'],
                                                factory=veriparse_linux_mingw64_build_factory(bconf)))

####### SCHEDULERS

all_builder_names = [builder.name for builder in c['builders']]

c['schedulers'] = [schedulers.ForceScheduler(name="force", builderNames=all_builder_names)]

for worker_name in worker_names + ['bb-mingw64-linux']:
    for git_branch in git_branches:
        builder_names = [get_builder_name(worker_name, git_branch, bconf) for bconf in build_configurations]
        c['schedulers'].append(schedulers.SingleBranchScheduler(name=get_scheduler_name(worker_name, git_branch),
                                                                change_filter=util.ChangeFilter(branch=git_branch),
                                                                treeStableTimer=600,
                                                                builderNames=builder_names))

####### Buildbot SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = [reporters.MailNotifier(fromaddr='cclienti@wavecruncher.net',
                                        sendToInterestedUsers=False,
                                        extraRecipients=['cclienti@wavecruncher.net'],
                                        relayhost='email.wavecruncher.net', smtpPort=587,
                                        smtpUser='cclienti', smtpPassword='BtR_u1x!')]
