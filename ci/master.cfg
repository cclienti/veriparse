# -*- python -*-
# ex: set filetype=python:
"""Buildbot master configuration."""

from buildbot.plugins import util, changes, schedulers, steps, worker, reporters

C = BuildmasterConfig = {}

###############################
# PROJECT IDENTITY
###############################
C['title'] = "WAVECRUNCHER"
C['titleURL'] = "https://dev.wavecruncher.net/"
C['buildbotURL'] = "http://localhost:8010/"

# minimalist config to activate new web UI
C['www'] = dict(port=8010, plugins=dict(waterfall_view={}, console_view={}, grid_view={}))
# C['www']['authz'] = util.Authz(allowRules=[util.AnyEndpointMatcher(role="admins")],
#                                roleMatchers=[util.RolesFromUsername(roles=['admins'],
#                                                                     usernames=['admin'])])
# C['www']['auth'] = util.UserPasswordAuth({'admin': 'zorglub24'})


###############################
# DB URL
###############################
C['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': "sqlite:///state.sqlite",
}

###############################
# Buildbot net usage disabling
###############################
C['buildbotNetUsageData'] = None


###############################
# WORKERS
###############################
WORKER_NAMES = ["bb-centos-7",
                "bb-debian-stretch", "bb-debian-buster",
                "bb-fedora-29",
                "bb-ubuntu-18_04"]


def create_worker(wname):
    """Create worker."""
    return worker.Worker(wname, "retsam-bb", max_builds=1)


C['workers'] = [create_worker(name) for name in WORKER_NAMES]
C['protocols'] = {'pb': {'port': 9989}}


###############################
# CHANGESOURCES
###############################
GIT_BRANCHES = ['master', 'release']

C['change_source'] = []
C['change_source'].append(changes.GitPoller('ssh://git@git.wavecruncher.net/srv/git/veriparse.git',
                                            workdir='gitpoller_veriparse',
                                            branches=GIT_BRANCHES, pollInterval=300))

###############################
# BUILDERS
###############################
BUILD_CONFIG = ['Release', 'Debug']


def veriparse_ext_build_factory(build_type):
    """Setup build factory for standard configuration."""
    build_dir = 'build-{}'.format(build_type)
    factory = util.BuildFactory()

    factory.addStep(
        steps.Git(repourl='ssh://git@git.wavecruncher.net/srv/git/veriparse.git',
                  mode='full',
                  method='clobber',
                  haltOnFailure=True))

    factory.addStep(
        steps.ShellCommand(name='mkdir',
                           command="mkdir -p {}".format(build_dir),
                           workdir='build/external',
                           haltOnFailure=True))

    factory.addStep(
        steps.ShellCommand(name='cmake',
                           command="cmake -DCMAKE_BUILD_TYPE={} ..".format(build_type),
                           workdir='build/external/{}'.format(build_dir),
                           haltOnFailure=True))

    factory.addStep(
        steps.ShellCommand(name='make',
                           command="make",
                           workdir='build/external/{}'.format(build_dir),
                           # env={'CPLUS_INCLUDE_PATH': '/usr/include/python3.7'},
                           haltOnFailure=True))

    factory.addStep(
        steps.ShellCommand(name='test',
                           command="ctest -V",
                           workdir=('build/external/{}'.format(build_dir) +
                                    '/veriparse-prefix/src/veriparse-build'),
                           env={'VERIPARSE_SOURCE_ROOT': '../../../../../../..'},
                           haltOnFailure=True))

    return factory


def veriparse_mingw64_build_factory(build_type):
    """Setup build factory for windows cross compilations."""
    build_dir = 'build-{}'.format(build_type)
    factory = util.BuildFactory()

    factory.addStep(
        steps.Git(repourl='ssh://git@git.wavecruncher.net/srv/git/veriparse.git',
                  mode='full',
                  method='clobber',
                  haltOnFailure=True))

    factory.addStep(
        steps.ShellCommand(name='mkdir',
                           command="mkdir -p {}".format(build_dir),
                           workdir='build',
                           haltOnFailure=True))

    factory.addStep(
        steps.ShellCommand(name='cmake',
                           command=("mingw64-cmake"
                                    " -DCMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES="
                                    "/usr/x86_64-w64-mingw32/sys-root/mingw/include"
                                    " -DCMAKE_BUILD_TYPE={} ..".format(build_type)),
                           workdir='build/{}'.format(build_dir),
                           haltOnFailure=True))

    factory.addStep(
        steps.ShellCommand(name='make',
                           command="make",
                           workdir='build/{}'.format(build_dir),
                           haltOnFailure=True))

    factory.addStep(
        steps.ShellCommand(name='tests',
                           command="ctest -V",
                           workdir='build/{}'.format(build_dir),
                           env={'WINEPATH': '/usr/x86_64-w64-mingw32/sys-root/mingw/bin',
                                'VERIPARSE_SOURCE_ROOT': '../../..'},
                           haltOnFailure=True))
    return factory


def get_scheduler_name(f_worker_name, f_git_branch):
    """Return the name of the name of the worker and the branch."""
    wname_split = f_worker_name.split('-')
    wname_list = [n.capitalize().replace('_', '.') for n in wname_split[1:]]
    wname = ' '.join(wname_list)
    return '{} - {} branch'.format(wname, f_git_branch)


def get_builder_name(f_worker_name, f_git_branch, f_build_config):
    """Return the name of the worker, the branch and the build config."""
    return '{} - {} config'.format(get_scheduler_name(f_worker_name, f_git_branch), f_build_config)


C['builders'] = []
for worker_name in WORKER_NAMES:
    for git_branch in GIT_BRANCHES:
        for bconf in BUILD_CONFIG:
            C['builders'].append(
                util.BuilderConfig(name=get_builder_name(worker_name, git_branch, bconf),
                                   workernames=[worker_name],
                                   factory=veriparse_ext_build_factory(bconf)))

# The worker bb-mingw64-linux does not exist. The real worker is bb-fedora-29.
for git_branch in GIT_BRANCHES:
    for bconf in BUILD_CONFIG:
        C['builders'].append(
            util.BuilderConfig(name=get_builder_name('bb-mingw64-linux', git_branch, bconf),
                               workernames=['bb-fedora-29'],
                               factory=veriparse_mingw64_build_factory(bconf)))

###############################
# SCHEDULERS
###############################

ALL_BUILDER_NAMES = [builder.name for builder in C['builders']]

C['schedulers'] = [schedulers.ForceScheduler(name="force", builderNames=ALL_BUILDER_NAMES)]

for worker_name in WORKER_NAMES + ['bb-mingw64-linux']:
    for git_branch in GIT_BRANCHES:
        builder_names = [get_builder_name(worker_name, git_branch, bconf) for bconf in BUILD_CONFIG]
        C['schedulers'].append(
            schedulers.SingleBranchScheduler(name=get_scheduler_name(worker_name, git_branch),
                                             change_filter=util.ChangeFilter(branch=git_branch),
                                             treeStableTimer=600,
                                             builderNames=builder_names))


###############################
# Buildbot SERVICES
###############################

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

C['services'] = [reporters.MailNotifier(fromaddr='christopheclienti@sfr.fr',
                                        sendToInterestedUsers=False,
                                        extraRecipients=['postmaster@wavecruncher.net'])]
