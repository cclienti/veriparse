#ifndef VERIPARSE_AST_NODE_TYPE_HPP
#define VERIPARSE_AST_NODE_TYPE_HPP

#include <iostream>

namespace Veriparse {
namespace AST {

enum class NodeType {
	Source,
	Description,
	Pragmalist,
	Pragma,
	Module,
	Port,
	Width,
	Length,
	Identifier,
	Constant,
	StringConst,
	IntConst,
	IntConstN,
	FloatConst,
	IODir,
	Input,
	Output,
	Inout,
	VariableBase,
	Genvar,
	Variable,
	Net,
	Integer,
	Real,
	Tri,
	Wire,
	Supply0,
	Supply1,
	Reg,
	Ioport,
	Parameter,
	Localparam,
	Concat,
	Lconcat,
	Repeat,
	Indirect,
	Partselect,
	PartselectIndexed,
	PartselectPlusIndexed,
	PartselectMinusIndexed,
	Pointer,
	Lvalue,
	Rvalue,
	UnaryOperator,
	Uplus,
	Uminus,
	Ulnot,
	Unot,
	Uand,
	Unand,
	Uor,
	Unor,
	Uxor,
	Uxnor,
	Operator,
	Power,
	Times,
	Divide,
	Mod,
	Plus,
	Minus,
	Sll,
	Srl,
	Sra,
	LessThan,
	GreaterThan,
	LessEq,
	GreaterEq,
	Eq,
	NotEq,
	Eql,
	NotEql,
	And,
	Xor,
	Xnor,
	Or,
	Land,
	Lor,
	Cond,
	Always,
	Senslist,
	Sens,
	Defparamlist,
	Defparam,
	Assign,
	BlockingSubstitution,
	NonblockingSubstitution,
	IfStatement,
	RepeatStatement,
	ForStatement,
	WhileStatement,
	CaseStatement,
	CasexStatement,
	CasezStatement,
	Case,
	Block,
	Initial,
	EventStatement,
	WaitStatement,
	ForeverStatement,
	DelayStatement,
	Instancelist,
	Instance,
	ParamArg,
	PortArg,
	Function,
	FunctionCall,
	Task,
	TaskCall,
	GenerateStatement,
	SystemCall,
	IdentifierScopeLabel,
	IdentifierScope,
	Disable,
	ParallelBlock,
	SingleStatement,
	Node,
	None
};

const char* NodeTypeToString(NodeType node_type);

std::ostream & operator<<(std::ostream &os, const NodeType node_type);

}
}

#endif