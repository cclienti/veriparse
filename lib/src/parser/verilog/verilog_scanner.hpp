#ifndef VERIPARSE_VERILOG_SCANNER_HPP
#define VERIPARSE_VERILOG_SCANNER_HPP

// Avoid multiple re-declaration
#ifndef yyFlexLexerOnce
// This trick allows to use multiple flex in the library. It must be
// used with the -P option of flex. see header of FlexLexer.h
#undef yyFlexLexer
#define yyFlexLexer VerilogFlexLexer
#include <FlexLexer.h>
#endif


/// Generated by bison in the cmake build dir
#include <verilog/verilog_parser.hpp>
#include <verilog/location.hh>

#include <veriparse/AST/nodes.hpp>

#include <string>
#include <vector>


namespace Veriparse {
	namespace Parser {

		class VerilogScanner : public yyFlexLexer {
		public:

			VerilogScanner(std::istream *in, const std::string &filename):
				yyFlexLexer(in),
				m_filename(filename)
			{
				loc = new Veriparse::Parser::VerilogParser::location_type();
				m_default_nettype = AST::Module::Default_nettypeEnum::WIRE;
			};

			virtual ~VerilogScanner() {
				delete loc;
			};

			virtual const std::string & get_filename() {return m_filename;}

			virtual AST::Module::Default_nettypeEnum get_default_nettype() {return m_default_nettype;}

			virtual int yylex(Veriparse::Parser::VerilogParser::semantic_type * const lval,
			                  Veriparse::Parser::VerilogParser::location_type * location);

			// YY_DECL defined in scanner.ll
			// Method body created by flex in lex.yy.cc

		private:
			/* yyval ptr */
			VerilogParser::semantic_type *yylval = nullptr;

			/* location ptr */
			VerilogParser::location_type *loc    = nullptr;

			/* Preprocessor tokens queue */
			std::vector<std::string> m_vpp_queue;

			/* Verilog Default nettype */
			AST::Module::Default_nettypeEnum m_default_nettype;

			/* file name string */
			std::string m_filename;
		};

	}
}

#endif
